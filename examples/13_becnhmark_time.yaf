# Ejemplo 13: Benchmarks de Tiempo
# Medicion de rendimiento de algoritmos usando now_millis()

func es_primo(n: int) -> int {
    if n < 2 { return 0 }
    i = 2
    for i = 2; i < n; i = i + 1 {
        if n % i == 0 { return 0 }
    }
    return 1
}

func fib(n: int) -> int {
    if n < 2 { return n }
    return fib(n - 1) + fib(n - 2)
}

func factorial(n: int) -> int {
    if n <= 1 { return 1 }
    return n * factorial(n - 1)
}

func mcd(a: int, b: int) -> int {
    # Algoritmo de Euclides - version simplificada
    if b == 0 { return a }
    return mcd(b, a % b)
}

print("=== BENCHMARKS YAF v0.1.0 ===")
print()

# Benchmark 1: Numeros primos
print("1. NUMEROS PRIMOS (2 a 30000)")
start1 = now_millis()
contador_primos = 0
for num = 2; num <= 30000; num = num + 1 {
    if es_primo(num) == 1 {
        contador_primos = contador_primos + 1
    }
}
end1 = now_millis()
duracion1 = end1 - start1
print("Primos encontrados:", contador_primos)
print("Tiempo:", duracion1, "ms")
print()

# Benchmark 2: Fibonacci recursivo
print("2. FIBONACCI RECURSIVO (n=30)")
start2 = now_millis()
resultado_fib = fib(30)
end2 = now_millis()
duracion2 = end2 - start2
print("Fibonacci(30):", resultado_fib)
print("Tiempo:", duracion2, "ms")
print()

# Benchmark 3: Sumatoria intensiva
print("3. SUMATORIA (1 a 1000000)")
start3 = now_millis()
suma = 0
for i = 1; i <= 1000000; i = i + 1 {
    suma = suma + i
}
end3 = now_millis()
duracion3 = end3 - start3
print("Resultado:", suma)
print("Tiempo:", duracion3, "ms")
print()

# Benchmark 4: Factoriales
print("4. FACTORIALES (10!)")
start4 = now_millis()
fact_10 = factorial(10)
end4 = now_millis()
duracion4 = end4 - start4
print("10! =", fact_10)
print("Tiempo:", duracion4, "ms")
print()

# Benchmark 5: MCD intensivo
print("5. MCD MASIVO (48, 18) x 10000 veces")
start5 = now_millis()
resultado_mcd = 0
for i = 1; i <= 10000; i = i + 1 {
    resultado_mcd = mcd(48, 18)
}
end5 = now_millis()
duracion5 = end5 - start5
print("MCD(48, 18) =", resultado_mcd)
print("Iteraciones: 10000")
print("Tiempo:", duracion5, "ms")
print()

# Resumen de benchmarks
tiempo_total = duracion1 + duracion2 + duracion3 + duracion4 + duracion5
print("=== RESUMEN ===")
print("Tiempo total de benchmarks:", tiempo_total, "ms")
print("Promedio por benchmark:", tiempo_total / 5, "ms")
print()
print("Â¡Benchmarks completados! YAF optimizado con LLVM.")